name: Build
on:
  workflow_call:
    inputs:
      version:
        description: |
          Expected to be in the format: vX.Y.Z
          Used for CFBundleShortVersionString after removing the leading "v"
          https://developer.apple.com/documentation/bundleresources/information_property_list/cfbundleshortversionstring
        required: true
        type: string
      xcode_version:
        default: "13.4"
        type: string
      scheme:
        description: |
          The SCHEME value here is the name of the default Xcode project target.
          It can also be retrieved through the following automatically, but let's
          just set it to save a job step and be explicit.

            $ xcodebuild -list -json | jq --raw-output '.project.schemes[0]'
        default: "GPG Tap Notifier"
        type: string
      dstroot_path:
        default: "/tmp/GPG Tap Notifier.dst"
        type: string
jobs:

  build:
    name: Build macOS
    runs-on: macos-12
    defaults:
      run:
        working-directory: Sources
    steps:
      - uses: actions/checkout@v3
      - name: Parse version
        # By convention GitHub release tags start with "v". Strip this leading
        # character to create the Xcode MARKETING_VERSION.
        run: |
          VERSION_REGEX="v([0-9]+\.[0-9]+\.[0-9]+)"
          if [[ ! "${{ inputs.version }}" =~ $VERSION_REGEX ]]; then
              exit 1
          fi
          echo "MARKETING_VERSION=${BASH_REMATCH[1]}" >> $GITHUB_ENV
      - name: Select Xcode
        run: |
          sudo xcode-select -switch "/Applications/Xcode_${{ inputs.xcode_version }}.app"
          /usr/bin/xcodebuild -version

      # From https://betterprogramming.pub/indie-mac-app-devops-with-github-actions-b16764a3ebe7
      - name: Read Xcode build settings
        run: |
          # DSTROOT seems to differ between "xcodebuild -showBuildSettings" and
          # "xcodebuild install". Set it to a hard-coded path so this is
          # predictable.
          XCODE_BUILD_SETTINGS=$(xcodebuild -scheme "${{ inputs.scheme }}" DSTROOT="${{ inputs.dstroot_path }}" -showBuildSettings -json)

          function set-env-from-proj {
            envValue=$(echo $XCODE_BUILD_SETTINGS | jq --raw-output ".[0].buildSettings.$1")
            echo "$1=$envValue" >> $GITHUB_ENV
          }

          # https://developer.apple.com/library/archive/documentation/DeveloperTools/Reference/XcodeBuildSettingRef/1-Build_Setting_Reference/build_setting_ref.html
          set-env-from-proj FULL_PRODUCT_NAME
          set-env-from-proj INSTALL_DIR # Equivalent to $DSTROOT/INSTALL_PATH
          set-env-from-proj PRODUCT_MODULE_NAME
          set-env-from-proj PRODUCT_NAME

      - name: Run xcodebuild install
        run: |
          xcodebuild \
            -scheme "${{ inputs.scheme }}" \
            DSTROOT="${{ inputs.dstroot_path }}" \
            MARKETING_VERSION="${{ env.MARKETING_VERSION }}" \
            install | xcpretty

      - name: Package ${{ env.PRODUCT_MODULE_NAME }}.dmg
        run: |
          # Using /private/tmp over /tmp due to https://github.com/actions/upload-artifact/issues/92
          DMG_PATH="/private/tmp/${{ env.PRODUCT_MODULE_NAME }}.dmg"
          echo "DMG_PATH=$DMG_PATH" >> $GITHUB_ENV

          hdiutil create \
            -fs HFS+ \
            -srcfolder "${{ env.INSTALL_DIR }}/${{ env.FULL_PRODUCT_NAME }}" \
            -volname "${{ env.PRODUCT_NAME }}" \
            "$DMG_PATH"

      - name: Upload ${{ env.PRODUCT_MODULE_NAME }}.dmg
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.PRODUCT_MODULE_NAME }}.dmg.zip
          path: "${{ env.DMG_PATH }}"
